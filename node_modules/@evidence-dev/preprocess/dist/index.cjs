var $9Mzl4$yaml = require("yaml");
var $9Mzl4$mdsvex = require("mdsvex");
var $9Mzl4$rehypeslug = require("rehype-slug");
var $9Mzl4$rehypeautolinkheadings = require("rehype-autolink-headings");
var $9Mzl4$blueimpmd5 = require("blueimp-md5");
var $9Mzl4$unified = require("unified");
var $9Mzl4$remarkparse = require("remark-parse");
var $9Mzl4$unistutilvisit = require("unist-util-visit");
var $9Mzl4$fs = require("fs");
var $9Mzl4$chalk = require("chalk");
var $9Mzl4$hastutilselect = require("hast-util-select");


      var $parcel$global = globalThis;
    
var $parcel$modules = {};
var $parcel$inits = {};

var parcelRequire = $parcel$global["parcelRequire94c2"];

if (parcelRequire == null) {
  parcelRequire = function(id) {
    if (id in $parcel$modules) {
      return $parcel$modules[id].exports;
    }
    if (id in $parcel$inits) {
      var init = $parcel$inits[id];
      delete $parcel$inits[id];
      var module = {id: id, exports: {}};
      $parcel$modules[id] = module;
      init.call(module.exports, module, module.exports);
      return module.exports;
    }
    var err = new Error("Cannot find module '" + id + "'");
    err.code = 'MODULE_NOT_FOUND';
    throw err;
  };

  parcelRequire.register = function register(id, init) {
    $parcel$inits[id] = init;
  };

  $parcel$global["parcelRequire94c2"] = parcelRequire;
}

var parcelRegister = parcelRequire.register;
parcelRegister("EOHnh", function(module, exports) {


var $i0Jqb = parcelRequire("i0Jqb");
var $902b553c07aac2f7$require$containsFrontmatter = $i0Jqb.containsFrontmatter;
/**
 * @param {string} content File Content
 * @returns {any}
 */ const $902b553c07aac2f7$var$parseFrontmatter = (content)=>{
    // Run against regex
    const frontmatter = $902b553c07aac2f7$require$containsFrontmatter(content);
    if (frontmatter) return $9Mzl4$yaml.parse(frontmatter) ?? {};
    // No match for frontmatter
    return undefined;
};
module.exports = {
    parseFrontmatter: $902b553c07aac2f7$var$parseFrontmatter
};

});
parcelRegister("i0Jqb", function(module, exports) {
const $96ccc955dd48050c$var$frontmatterRegex = /^\s*---((?:.|\s)+?)---/;
/**
 * @param {string} toCheck
 * @returns {string | false}
 */ const $96ccc955dd48050c$var$containsFrontmatter = (toCheck)=>$96ccc955dd48050c$var$frontmatterRegex.exec(toCheck)?.[1] ?? false;
module.exports = {
    frontmatterRegex: $96ccc955dd48050c$var$frontmatterRegex,
    containsFrontmatter: $96ccc955dd48050c$var$containsFrontmatter
};

});


parcelRegister("gDT74", function(module, exports) {
module.exports = `
<!-- 
    MDSvex comes in handy here because it takes frontmatter and shoves it into the metadata object.
    This means that all we need to do is build out the expected page metadata
-->
<!-- Show title as h1 if defined, and not hidden -->
{#if typeof metadata !== "undefined" && (metadata.title || metadata.og?.title) && metadata.hide_title !== true}
<h1 class="title">{metadata.title ?? metadata.og?.title}</h1>
{/if}
<svelte:head>
<!-- Title has a default case; so we need to handle it in a special way -->
{#if typeof metadata !== "undefined" && (metadata.title || metadata.og?.title)}
<title>{metadata.title ?? metadata.og?.title}</title>
<meta property="og:title" content={metadata.og?.title ?? metadata.title} />
<meta name="twitter:title" content={metadata.og?.title ?? metadata.title} />
{:else}
<!-- EITHER there is no metadata, or there is no specified style -->
<title>Evidence</title>
{/if}

<!-- default twitter cardtags -->
<meta name="twitter:card" content="summary" />
<meta name="twitter:site" content="@evidence_dev" />

{#if typeof metadata === "object"}
{#if metadata.description || metadata.og?.description}
  <meta
    name="description"
    content={metadata.description ?? metadata.og?.description}
  />
  <meta
    property="og:description"
    content={metadata.og?.description ?? metadata.description}
  />
  <meta
    name="twitter:description"
    content={metadata.og?.description ?? metadata.description}
  />
{/if}
{#if metadata.og?.image}
  <meta property="og:image" content={addBasePath(metadata.og?.image)} />
  <meta name="twitter:image" content={addBasePath(metadata.og?.image)} />
{/if}
{/if}
</svelte:head>
`;

});


var $cd1a4f047825b413$exports = {};
var $995831ea55bf4433$exports = {};
var $f461167874f9fba1$exports = {};
var $f461167874f9fba1$var$components = {
    "core": {
        "meta": {
            "path": "components/prism-core.js",
            "option": "mandatory"
        },
        "core": "Core"
    },
    "themes": {
        "meta": {
            "path": "themes/{id}.css",
            "link": "index.html?theme={id}",
            "exclusive": true
        },
        "prism": {
            "title": "Default",
            "option": "default"
        },
        "prism-dark": "Dark",
        "prism-funky": "Funky",
        "prism-okaidia": {
            "title": "Okaidia",
            "owner": "ocodia"
        },
        "prism-twilight": {
            "title": "Twilight",
            "owner": "remybach"
        },
        "prism-coy": {
            "title": "Coy",
            "owner": "tshedor"
        },
        "prism-solarizedlight": {
            "title": "Solarized Light",
            "owner": "hectormatos2011 "
        },
        "prism-tomorrow": {
            "title": "Tomorrow Night",
            "owner": "Rosey"
        }
    },
    "languages": {
        "meta": {
            "path": "components/prism-{id}",
            "noCSS": true,
            "examplesPath": "examples/prism-{id}",
            "addCheckAll": true
        },
        "markup": {
            "title": "Markup",
            "alias": [
                "html",
                "xml",
                "svg",
                "mathml",
                "ssml",
                "atom",
                "rss"
            ],
            "aliasTitles": {
                "html": "HTML",
                "xml": "XML",
                "svg": "SVG",
                "mathml": "MathML",
                "ssml": "SSML",
                "atom": "Atom",
                "rss": "RSS"
            },
            "option": "default"
        },
        "css": {
            "title": "CSS",
            "option": "default",
            "modify": "markup"
        },
        "clike": {
            "title": "C-like",
            "option": "default"
        },
        "javascript": {
            "title": "JavaScript",
            "require": "clike",
            "modify": "markup",
            "optional": "regex",
            "alias": "js",
            "option": "default"
        },
        "abap": {
            "title": "ABAP",
            "owner": "dellagustin"
        },
        "abnf": {
            "title": "ABNF",
            "owner": "RunDevelopment"
        },
        "actionscript": {
            "title": "ActionScript",
            "require": "javascript",
            "modify": "markup",
            "owner": "Golmote"
        },
        "ada": {
            "title": "Ada",
            "owner": "Lucretia"
        },
        "agda": {
            "title": "Agda",
            "owner": "xy-ren"
        },
        "al": {
            "title": "AL",
            "owner": "RunDevelopment"
        },
        "antlr4": {
            "title": "ANTLR4",
            "alias": "g4",
            "owner": "RunDevelopment"
        },
        "apacheconf": {
            "title": "Apache Configuration",
            "owner": "GuiTeK"
        },
        "apex": {
            "title": "Apex",
            "require": [
                "clike",
                "sql"
            ],
            "owner": "RunDevelopment"
        },
        "apl": {
            "title": "APL",
            "owner": "ngn"
        },
        "applescript": {
            "title": "AppleScript",
            "owner": "Golmote"
        },
        "aql": {
            "title": "AQL",
            "owner": "RunDevelopment"
        },
        "arduino": {
            "title": "Arduino",
            "require": "cpp",
            "alias": "ino",
            "owner": "dkern"
        },
        "arff": {
            "title": "ARFF",
            "owner": "Golmote"
        },
        "armasm": {
            "title": "ARM Assembly",
            "alias": "arm-asm",
            "owner": "RunDevelopment"
        },
        "arturo": {
            "title": "Arturo",
            "alias": "art",
            "optional": [
                "bash",
                "css",
                "javascript",
                "markup",
                "markdown",
                "sql"
            ],
            "owner": "drkameleon"
        },
        "asciidoc": {
            "alias": "adoc",
            "title": "AsciiDoc",
            "owner": "Golmote"
        },
        "aspnet": {
            "title": "ASP.NET (C#)",
            "require": [
                "markup",
                "csharp"
            ],
            "owner": "nauzilus"
        },
        "asm6502": {
            "title": "6502 Assembly",
            "owner": "kzurawel"
        },
        "asmatmel": {
            "title": "Atmel AVR Assembly",
            "owner": "cerkit"
        },
        "autohotkey": {
            "title": "AutoHotkey",
            "owner": "aviaryan"
        },
        "autoit": {
            "title": "AutoIt",
            "owner": "Golmote"
        },
        "avisynth": {
            "title": "AviSynth",
            "alias": "avs",
            "owner": "Zinfidel"
        },
        "avro-idl": {
            "title": "Avro IDL",
            "alias": "avdl",
            "owner": "RunDevelopment"
        },
        "awk": {
            "title": "AWK",
            "alias": "gawk",
            "aliasTitles": {
                "gawk": "GAWK"
            },
            "owner": "RunDevelopment"
        },
        "bash": {
            "title": "Bash",
            "alias": [
                "sh",
                "shell"
            ],
            "aliasTitles": {
                "sh": "Shell",
                "shell": "Shell"
            },
            "owner": "zeitgeist87"
        },
        "basic": {
            "title": "BASIC",
            "owner": "Golmote"
        },
        "batch": {
            "title": "Batch",
            "owner": "Golmote"
        },
        "bbcode": {
            "title": "BBcode",
            "alias": "shortcode",
            "aliasTitles": {
                "shortcode": "Shortcode"
            },
            "owner": "RunDevelopment"
        },
        "bbj": {
            "title": "BBj",
            "owner": "hyyan"
        },
        "bicep": {
            "title": "Bicep",
            "owner": "johnnyreilly"
        },
        "birb": {
            "title": "Birb",
            "require": "clike",
            "owner": "Calamity210"
        },
        "bison": {
            "title": "Bison",
            "require": "c",
            "owner": "Golmote"
        },
        "bnf": {
            "title": "BNF",
            "alias": "rbnf",
            "aliasTitles": {
                "rbnf": "RBNF"
            },
            "owner": "RunDevelopment"
        },
        "bqn": {
            "title": "BQN",
            "owner": "yewscion"
        },
        "brainfuck": {
            "title": "Brainfuck",
            "owner": "Golmote"
        },
        "brightscript": {
            "title": "BrightScript",
            "owner": "RunDevelopment"
        },
        "bro": {
            "title": "Bro",
            "owner": "wayward710"
        },
        "bsl": {
            "title": "BSL (1C:Enterprise)",
            "alias": "oscript",
            "aliasTitles": {
                "oscript": "OneScript"
            },
            "owner": "Diversus23"
        },
        "c": {
            "title": "C",
            "require": "clike",
            "owner": "zeitgeist87"
        },
        "csharp": {
            "title": "C#",
            "require": "clike",
            "alias": [
                "cs",
                "dotnet"
            ],
            "owner": "mvalipour"
        },
        "cpp": {
            "title": "C++",
            "require": "c",
            "owner": "zeitgeist87"
        },
        "cfscript": {
            "title": "CFScript",
            "require": "clike",
            "alias": "cfc",
            "owner": "mjclemente"
        },
        "chaiscript": {
            "title": "ChaiScript",
            "require": [
                "clike",
                "cpp"
            ],
            "owner": "RunDevelopment"
        },
        "cil": {
            "title": "CIL",
            "owner": "sbrl"
        },
        "cilkc": {
            "title": "Cilk/C",
            "require": "c",
            "alias": "cilk-c",
            "owner": "OpenCilk"
        },
        "cilkcpp": {
            "title": "Cilk/C++",
            "require": "cpp",
            "alias": [
                "cilk-cpp",
                "cilk"
            ],
            "owner": "OpenCilk"
        },
        "clojure": {
            "title": "Clojure",
            "owner": "troglotit"
        },
        "cmake": {
            "title": "CMake",
            "owner": "mjrogozinski"
        },
        "cobol": {
            "title": "COBOL",
            "owner": "RunDevelopment"
        },
        "coffeescript": {
            "title": "CoffeeScript",
            "require": "javascript",
            "alias": "coffee",
            "owner": "R-osey"
        },
        "concurnas": {
            "title": "Concurnas",
            "alias": "conc",
            "owner": "jasontatton"
        },
        "csp": {
            "title": "Content-Security-Policy",
            "owner": "ScottHelme"
        },
        "cooklang": {
            "title": "Cooklang",
            "owner": "ahue"
        },
        "coq": {
            "title": "Coq",
            "owner": "RunDevelopment"
        },
        "crystal": {
            "title": "Crystal",
            "require": "ruby",
            "owner": "MakeNowJust"
        },
        "css-extras": {
            "title": "CSS Extras",
            "require": "css",
            "modify": "css",
            "owner": "milesj"
        },
        "csv": {
            "title": "CSV",
            "owner": "RunDevelopment"
        },
        "cue": {
            "title": "CUE",
            "owner": "RunDevelopment"
        },
        "cypher": {
            "title": "Cypher",
            "owner": "RunDevelopment"
        },
        "d": {
            "title": "D",
            "require": "clike",
            "owner": "Golmote"
        },
        "dart": {
            "title": "Dart",
            "require": "clike",
            "owner": "Golmote"
        },
        "dataweave": {
            "title": "DataWeave",
            "owner": "machaval"
        },
        "dax": {
            "title": "DAX",
            "owner": "peterbud"
        },
        "dhall": {
            "title": "Dhall",
            "owner": "RunDevelopment"
        },
        "diff": {
            "title": "Diff",
            "owner": "uranusjr"
        },
        "django": {
            "title": "Django/Jinja2",
            "require": "markup-templating",
            "alias": "jinja2",
            "owner": "romanvm"
        },
        "dns-zone-file": {
            "title": "DNS zone file",
            "owner": "RunDevelopment",
            "alias": "dns-zone"
        },
        "docker": {
            "title": "Docker",
            "alias": "dockerfile",
            "owner": "JustinBeckwith"
        },
        "dot": {
            "title": "DOT (Graphviz)",
            "alias": "gv",
            "optional": "markup",
            "owner": "RunDevelopment"
        },
        "ebnf": {
            "title": "EBNF",
            "owner": "RunDevelopment"
        },
        "editorconfig": {
            "title": "EditorConfig",
            "owner": "osipxd"
        },
        "eiffel": {
            "title": "Eiffel",
            "owner": "Conaclos"
        },
        "ejs": {
            "title": "EJS",
            "require": [
                "javascript",
                "markup-templating"
            ],
            "owner": "RunDevelopment",
            "alias": "eta",
            "aliasTitles": {
                "eta": "Eta"
            }
        },
        "elixir": {
            "title": "Elixir",
            "owner": "Golmote"
        },
        "elm": {
            "title": "Elm",
            "owner": "zwilias"
        },
        "etlua": {
            "title": "Embedded Lua templating",
            "require": [
                "lua",
                "markup-templating"
            ],
            "owner": "RunDevelopment"
        },
        "erb": {
            "title": "ERB",
            "require": [
                "ruby",
                "markup-templating"
            ],
            "owner": "Golmote"
        },
        "erlang": {
            "title": "Erlang",
            "owner": "Golmote"
        },
        "excel-formula": {
            "title": "Excel Formula",
            "alias": [
                "xlsx",
                "xls"
            ],
            "owner": "RunDevelopment"
        },
        "fsharp": {
            "title": "F#",
            "require": "clike",
            "owner": "simonreynolds7"
        },
        "factor": {
            "title": "Factor",
            "owner": "catb0t"
        },
        "false": {
            "title": "False",
            "owner": "edukisto"
        },
        "firestore-security-rules": {
            "title": "Firestore security rules",
            "require": "clike",
            "owner": "RunDevelopment"
        },
        "flow": {
            "title": "Flow",
            "require": "javascript",
            "owner": "Golmote"
        },
        "fortran": {
            "title": "Fortran",
            "owner": "Golmote"
        },
        "ftl": {
            "title": "FreeMarker Template Language",
            "require": "markup-templating",
            "owner": "RunDevelopment"
        },
        "gml": {
            "title": "GameMaker Language",
            "alias": "gamemakerlanguage",
            "require": "clike",
            "owner": "LiarOnce"
        },
        "gap": {
            "title": "GAP (CAS)",
            "owner": "RunDevelopment"
        },
        "gcode": {
            "title": "G-code",
            "owner": "RunDevelopment"
        },
        "gdscript": {
            "title": "GDScript",
            "owner": "RunDevelopment"
        },
        "gedcom": {
            "title": "GEDCOM",
            "owner": "Golmote"
        },
        "gettext": {
            "title": "gettext",
            "alias": "po",
            "owner": "RunDevelopment"
        },
        "gherkin": {
            "title": "Gherkin",
            "owner": "hason"
        },
        "git": {
            "title": "Git",
            "owner": "lgiraudel"
        },
        "glsl": {
            "title": "GLSL",
            "require": "c",
            "owner": "Golmote"
        },
        "gn": {
            "title": "GN",
            "alias": "gni",
            "owner": "RunDevelopment"
        },
        "linker-script": {
            "title": "GNU Linker Script",
            "alias": "ld",
            "owner": "RunDevelopment"
        },
        "go": {
            "title": "Go",
            "require": "clike",
            "owner": "arnehormann"
        },
        "go-module": {
            "title": "Go module",
            "alias": "go-mod",
            "owner": "RunDevelopment"
        },
        "gradle": {
            "title": "Gradle",
            "require": "clike",
            "owner": "zeabdelkhalek-badido18"
        },
        "graphql": {
            "title": "GraphQL",
            "optional": "markdown",
            "owner": "Golmote"
        },
        "groovy": {
            "title": "Groovy",
            "require": "clike",
            "owner": "robfletcher"
        },
        "haml": {
            "title": "Haml",
            "require": "ruby",
            "optional": [
                "css",
                "css-extras",
                "coffeescript",
                "erb",
                "javascript",
                "less",
                "markdown",
                "scss",
                "textile"
            ],
            "owner": "Golmote"
        },
        "handlebars": {
            "title": "Handlebars",
            "require": "markup-templating",
            "alias": [
                "hbs",
                "mustache"
            ],
            "aliasTitles": {
                "mustache": "Mustache"
            },
            "owner": "Golmote"
        },
        "haskell": {
            "title": "Haskell",
            "alias": "hs",
            "owner": "bholst"
        },
        "haxe": {
            "title": "Haxe",
            "require": "clike",
            "optional": "regex",
            "owner": "Golmote"
        },
        "hcl": {
            "title": "HCL",
            "owner": "outsideris"
        },
        "hlsl": {
            "title": "HLSL",
            "require": "c",
            "owner": "RunDevelopment"
        },
        "hoon": {
            "title": "Hoon",
            "owner": "matildepark"
        },
        "http": {
            "title": "HTTP",
            "optional": [
                "csp",
                "css",
                "hpkp",
                "hsts",
                "javascript",
                "json",
                "markup",
                "uri"
            ],
            "owner": "danielgtaylor"
        },
        "hpkp": {
            "title": "HTTP Public-Key-Pins",
            "owner": "ScottHelme"
        },
        "hsts": {
            "title": "HTTP Strict-Transport-Security",
            "owner": "ScottHelme"
        },
        "ichigojam": {
            "title": "IchigoJam",
            "owner": "BlueCocoa"
        },
        "icon": {
            "title": "Icon",
            "owner": "Golmote"
        },
        "icu-message-format": {
            "title": "ICU Message Format",
            "owner": "RunDevelopment"
        },
        "idris": {
            "title": "Idris",
            "alias": "idr",
            "owner": "KeenS",
            "require": "haskell"
        },
        "ignore": {
            "title": ".ignore",
            "owner": "osipxd",
            "alias": [
                "gitignore",
                "hgignore",
                "npmignore"
            ],
            "aliasTitles": {
                "gitignore": ".gitignore",
                "hgignore": ".hgignore",
                "npmignore": ".npmignore"
            }
        },
        "inform7": {
            "title": "Inform 7",
            "owner": "Golmote"
        },
        "ini": {
            "title": "Ini",
            "owner": "aviaryan"
        },
        "io": {
            "title": "Io",
            "owner": "AlesTsurko"
        },
        "j": {
            "title": "J",
            "owner": "Golmote"
        },
        "java": {
            "title": "Java",
            "require": "clike",
            "owner": "sherblot"
        },
        "javadoc": {
            "title": "JavaDoc",
            "require": [
                "markup",
                "java",
                "javadoclike"
            ],
            "modify": "java",
            "optional": "scala",
            "owner": "RunDevelopment"
        },
        "javadoclike": {
            "title": "JavaDoc-like",
            "modify": [
                "java",
                "javascript",
                "php"
            ],
            "owner": "RunDevelopment"
        },
        "javastacktrace": {
            "title": "Java stack trace",
            "owner": "RunDevelopment"
        },
        "jexl": {
            "title": "Jexl",
            "owner": "czosel"
        },
        "jolie": {
            "title": "Jolie",
            "require": "clike",
            "owner": "thesave"
        },
        "jq": {
            "title": "JQ",
            "owner": "RunDevelopment"
        },
        "jsdoc": {
            "title": "JSDoc",
            "require": [
                "javascript",
                "javadoclike",
                "typescript"
            ],
            "modify": "javascript",
            "optional": [
                "actionscript",
                "coffeescript"
            ],
            "owner": "RunDevelopment"
        },
        "js-extras": {
            "title": "JS Extras",
            "require": "javascript",
            "modify": "javascript",
            "optional": [
                "actionscript",
                "coffeescript",
                "flow",
                "n4js",
                "typescript"
            ],
            "owner": "RunDevelopment"
        },
        "json": {
            "title": "JSON",
            "alias": "webmanifest",
            "aliasTitles": {
                "webmanifest": "Web App Manifest"
            },
            "owner": "CupOfTea696"
        },
        "json5": {
            "title": "JSON5",
            "require": "json",
            "owner": "RunDevelopment"
        },
        "jsonp": {
            "title": "JSONP",
            "require": "json",
            "owner": "RunDevelopment"
        },
        "jsstacktrace": {
            "title": "JS stack trace",
            "owner": "sbrl"
        },
        "js-templates": {
            "title": "JS Templates",
            "require": "javascript",
            "modify": "javascript",
            "optional": [
                "css",
                "css-extras",
                "graphql",
                "markdown",
                "markup",
                "sql"
            ],
            "owner": "RunDevelopment"
        },
        "julia": {
            "title": "Julia",
            "owner": "cdagnino"
        },
        "keepalived": {
            "title": "Keepalived Configure",
            "owner": "dev-itsheng"
        },
        "keyman": {
            "title": "Keyman",
            "owner": "mcdurdin"
        },
        "kotlin": {
            "title": "Kotlin",
            "alias": [
                "kt",
                "kts"
            ],
            "aliasTitles": {
                "kts": "Kotlin Script"
            },
            "require": "clike",
            "owner": "Golmote"
        },
        "kumir": {
            "title": "KuMir (\u041A\u0443\u041C\u0438\u0440)",
            "alias": "kum",
            "owner": "edukisto"
        },
        "kusto": {
            "title": "Kusto",
            "owner": "RunDevelopment"
        },
        "latex": {
            "title": "LaTeX",
            "alias": [
                "tex",
                "context"
            ],
            "aliasTitles": {
                "tex": "TeX",
                "context": "ConTeXt"
            },
            "owner": "japborst"
        },
        "latte": {
            "title": "Latte",
            "require": [
                "clike",
                "markup-templating",
                "php"
            ],
            "owner": "nette"
        },
        "less": {
            "title": "Less",
            "require": "css",
            "optional": "css-extras",
            "owner": "Golmote"
        },
        "lilypond": {
            "title": "LilyPond",
            "require": "scheme",
            "alias": "ly",
            "owner": "RunDevelopment"
        },
        "liquid": {
            "title": "Liquid",
            "require": "markup-templating",
            "owner": "cinhtau"
        },
        "lisp": {
            "title": "Lisp",
            "alias": [
                "emacs",
                "elisp",
                "emacs-lisp"
            ],
            "owner": "JuanCaicedo"
        },
        "livescript": {
            "title": "LiveScript",
            "owner": "Golmote"
        },
        "llvm": {
            "title": "LLVM IR",
            "owner": "porglezomp"
        },
        "log": {
            "title": "Log file",
            "optional": "javastacktrace",
            "owner": "RunDevelopment"
        },
        "lolcode": {
            "title": "LOLCODE",
            "owner": "Golmote"
        },
        "lua": {
            "title": "Lua",
            "owner": "Golmote"
        },
        "magma": {
            "title": "Magma (CAS)",
            "owner": "RunDevelopment"
        },
        "makefile": {
            "title": "Makefile",
            "owner": "Golmote"
        },
        "markdown": {
            "title": "Markdown",
            "require": "markup",
            "optional": "yaml",
            "alias": "md",
            "owner": "Golmote"
        },
        "markup-templating": {
            "title": "Markup templating",
            "require": "markup",
            "owner": "Golmote"
        },
        "mata": {
            "title": "Mata",
            "owner": "RunDevelopment"
        },
        "matlab": {
            "title": "MATLAB",
            "owner": "Golmote"
        },
        "maxscript": {
            "title": "MAXScript",
            "owner": "RunDevelopment"
        },
        "mel": {
            "title": "MEL",
            "owner": "Golmote"
        },
        "mermaid": {
            "title": "Mermaid",
            "owner": "RunDevelopment"
        },
        "metafont": {
            "title": "METAFONT",
            "owner": "LaeriExNihilo"
        },
        "mizar": {
            "title": "Mizar",
            "owner": "Golmote"
        },
        "mongodb": {
            "title": "MongoDB",
            "owner": "airs0urce",
            "require": "javascript"
        },
        "monkey": {
            "title": "Monkey",
            "owner": "Golmote"
        },
        "moonscript": {
            "title": "MoonScript",
            "alias": "moon",
            "owner": "RunDevelopment"
        },
        "n1ql": {
            "title": "N1QL",
            "owner": "TMWilds"
        },
        "n4js": {
            "title": "N4JS",
            "require": "javascript",
            "optional": "jsdoc",
            "alias": "n4jsd",
            "owner": "bsmith-n4"
        },
        "nand2tetris-hdl": {
            "title": "Nand To Tetris HDL",
            "owner": "stephanmax"
        },
        "naniscript": {
            "title": "Naninovel Script",
            "owner": "Elringus",
            "alias": "nani"
        },
        "nasm": {
            "title": "NASM",
            "owner": "rbmj"
        },
        "neon": {
            "title": "NEON",
            "owner": "nette"
        },
        "nevod": {
            "title": "Nevod",
            "owner": "nezaboodka"
        },
        "nginx": {
            "title": "nginx",
            "owner": "volado"
        },
        "nim": {
            "title": "Nim",
            "owner": "Golmote"
        },
        "nix": {
            "title": "Nix",
            "owner": "Golmote"
        },
        "nsis": {
            "title": "NSIS",
            "owner": "idleberg"
        },
        "objectivec": {
            "title": "Objective-C",
            "require": "c",
            "alias": "objc",
            "owner": "uranusjr"
        },
        "ocaml": {
            "title": "OCaml",
            "owner": "Golmote"
        },
        "odin": {
            "title": "Odin",
            "owner": "edukisto"
        },
        "opencl": {
            "title": "OpenCL",
            "require": "c",
            "modify": [
                "c",
                "cpp"
            ],
            "owner": "Milania1"
        },
        "openqasm": {
            "title": "OpenQasm",
            "alias": "qasm",
            "owner": "RunDevelopment"
        },
        "oz": {
            "title": "Oz",
            "owner": "Golmote"
        },
        "parigp": {
            "title": "PARI/GP",
            "owner": "Golmote"
        },
        "parser": {
            "title": "Parser",
            "require": "markup",
            "owner": "Golmote"
        },
        "pascal": {
            "title": "Pascal",
            "alias": "objectpascal",
            "aliasTitles": {
                "objectpascal": "Object Pascal"
            },
            "owner": "Golmote"
        },
        "pascaligo": {
            "title": "Pascaligo",
            "owner": "DefinitelyNotAGoat"
        },
        "psl": {
            "title": "PATROL Scripting Language",
            "owner": "bertysentry"
        },
        "pcaxis": {
            "title": "PC-Axis",
            "alias": "px",
            "owner": "RunDevelopment"
        },
        "peoplecode": {
            "title": "PeopleCode",
            "alias": "pcode",
            "owner": "RunDevelopment"
        },
        "perl": {
            "title": "Perl",
            "owner": "Golmote"
        },
        "php": {
            "title": "PHP",
            "require": "markup-templating",
            "owner": "milesj"
        },
        "phpdoc": {
            "title": "PHPDoc",
            "require": [
                "php",
                "javadoclike"
            ],
            "modify": "php",
            "owner": "RunDevelopment"
        },
        "php-extras": {
            "title": "PHP Extras",
            "require": "php",
            "modify": "php",
            "owner": "milesj"
        },
        "plant-uml": {
            "title": "PlantUML",
            "alias": "plantuml",
            "owner": "RunDevelopment"
        },
        "plsql": {
            "title": "PL/SQL",
            "require": "sql",
            "owner": "Golmote"
        },
        "powerquery": {
            "title": "PowerQuery",
            "alias": [
                "pq",
                "mscript"
            ],
            "owner": "peterbud"
        },
        "powershell": {
            "title": "PowerShell",
            "owner": "nauzilus"
        },
        "processing": {
            "title": "Processing",
            "require": "clike",
            "owner": "Golmote"
        },
        "prolog": {
            "title": "Prolog",
            "owner": "Golmote"
        },
        "promql": {
            "title": "PromQL",
            "owner": "arendjr"
        },
        "properties": {
            "title": ".properties",
            "owner": "Golmote"
        },
        "protobuf": {
            "title": "Protocol Buffers",
            "require": "clike",
            "owner": "just-boris"
        },
        "pug": {
            "title": "Pug",
            "require": [
                "markup",
                "javascript"
            ],
            "optional": [
                "coffeescript",
                "ejs",
                "handlebars",
                "less",
                "livescript",
                "markdown",
                "scss",
                "stylus",
                "twig"
            ],
            "owner": "Golmote"
        },
        "puppet": {
            "title": "Puppet",
            "owner": "Golmote"
        },
        "pure": {
            "title": "Pure",
            "optional": [
                "c",
                "cpp",
                "fortran"
            ],
            "owner": "Golmote"
        },
        "purebasic": {
            "title": "PureBasic",
            "require": "clike",
            "alias": "pbfasm",
            "owner": "HeX0R101"
        },
        "purescript": {
            "title": "PureScript",
            "require": "haskell",
            "alias": "purs",
            "owner": "sriharshachilakapati"
        },
        "python": {
            "title": "Python",
            "alias": "py",
            "owner": "multipetros"
        },
        "qsharp": {
            "title": "Q#",
            "require": "clike",
            "alias": "qs",
            "owner": "fedonman"
        },
        "q": {
            "title": "Q (kdb+ database)",
            "owner": "Golmote"
        },
        "qml": {
            "title": "QML",
            "require": "javascript",
            "owner": "RunDevelopment"
        },
        "qore": {
            "title": "Qore",
            "require": "clike",
            "owner": "temnroegg"
        },
        "r": {
            "title": "R",
            "owner": "Golmote"
        },
        "racket": {
            "title": "Racket",
            "require": "scheme",
            "alias": "rkt",
            "owner": "RunDevelopment"
        },
        "cshtml": {
            "title": "Razor C#",
            "alias": "razor",
            "require": [
                "markup",
                "csharp"
            ],
            "optional": [
                "css",
                "css-extras",
                "javascript",
                "js-extras"
            ],
            "owner": "RunDevelopment"
        },
        "jsx": {
            "title": "React JSX",
            "require": [
                "markup",
                "javascript"
            ],
            "optional": [
                "jsdoc",
                "js-extras",
                "js-templates"
            ],
            "owner": "vkbansal"
        },
        "tsx": {
            "title": "React TSX",
            "require": [
                "jsx",
                "typescript"
            ]
        },
        "reason": {
            "title": "Reason",
            "require": "clike",
            "owner": "Golmote"
        },
        "regex": {
            "title": "Regex",
            "owner": "RunDevelopment"
        },
        "rego": {
            "title": "Rego",
            "owner": "JordanSh"
        },
        "renpy": {
            "title": "Ren'py",
            "alias": "rpy",
            "owner": "HyuchiaDiego"
        },
        "rescript": {
            "title": "ReScript",
            "alias": "res",
            "owner": "vmarcosp"
        },
        "rest": {
            "title": "reST (reStructuredText)",
            "owner": "Golmote"
        },
        "rip": {
            "title": "Rip",
            "owner": "ravinggenius"
        },
        "roboconf": {
            "title": "Roboconf",
            "owner": "Golmote"
        },
        "robotframework": {
            "title": "Robot Framework",
            "alias": "robot",
            "owner": "RunDevelopment"
        },
        "ruby": {
            "title": "Ruby",
            "require": "clike",
            "alias": "rb",
            "owner": "samflores"
        },
        "rust": {
            "title": "Rust",
            "owner": "Golmote"
        },
        "sas": {
            "title": "SAS",
            "optional": [
                "groovy",
                "lua",
                "sql"
            ],
            "owner": "Golmote"
        },
        "sass": {
            "title": "Sass (Sass)",
            "require": "css",
            "optional": "css-extras",
            "owner": "Golmote"
        },
        "scss": {
            "title": "Sass (SCSS)",
            "require": "css",
            "optional": "css-extras",
            "owner": "MoOx"
        },
        "scala": {
            "title": "Scala",
            "require": "java",
            "owner": "jozic"
        },
        "scheme": {
            "title": "Scheme",
            "owner": "bacchus123"
        },
        "shell-session": {
            "title": "Shell session",
            "require": "bash",
            "alias": [
                "sh-session",
                "shellsession"
            ],
            "owner": "RunDevelopment"
        },
        "smali": {
            "title": "Smali",
            "owner": "RunDevelopment"
        },
        "smalltalk": {
            "title": "Smalltalk",
            "owner": "Golmote"
        },
        "smarty": {
            "title": "Smarty",
            "require": "markup-templating",
            "optional": "php",
            "owner": "Golmote"
        },
        "sml": {
            "title": "SML",
            "alias": "smlnj",
            "aliasTitles": {
                "smlnj": "SML/NJ"
            },
            "owner": "RunDevelopment"
        },
        "solidity": {
            "title": "Solidity (Ethereum)",
            "alias": "sol",
            "require": "clike",
            "owner": "glachaud"
        },
        "solution-file": {
            "title": "Solution file",
            "alias": "sln",
            "owner": "RunDevelopment"
        },
        "soy": {
            "title": "Soy (Closure Template)",
            "require": "markup-templating",
            "owner": "Golmote"
        },
        "sparql": {
            "title": "SPARQL",
            "require": "turtle",
            "owner": "Triply-Dev",
            "alias": "rq"
        },
        "splunk-spl": {
            "title": "Splunk SPL",
            "owner": "RunDevelopment"
        },
        "sqf": {
            "title": "SQF: Status Quo Function (Arma 3)",
            "require": "clike",
            "owner": "RunDevelopment"
        },
        "sql": {
            "title": "SQL",
            "owner": "multipetros"
        },
        "squirrel": {
            "title": "Squirrel",
            "require": "clike",
            "owner": "RunDevelopment"
        },
        "stan": {
            "title": "Stan",
            "owner": "RunDevelopment"
        },
        "stata": {
            "title": "Stata Ado",
            "require": [
                "mata",
                "java",
                "python"
            ],
            "owner": "RunDevelopment"
        },
        "iecst": {
            "title": "Structured Text (IEC 61131-3)",
            "owner": "serhioromano"
        },
        "stylus": {
            "title": "Stylus",
            "owner": "vkbansal"
        },
        "supercollider": {
            "title": "SuperCollider",
            "alias": "sclang",
            "owner": "RunDevelopment"
        },
        "swift": {
            "title": "Swift",
            "owner": "chrischares"
        },
        "systemd": {
            "title": "Systemd configuration file",
            "owner": "RunDevelopment"
        },
        "t4-templating": {
            "title": "T4 templating",
            "owner": "RunDevelopment"
        },
        "t4-cs": {
            "title": "T4 Text Templates (C#)",
            "require": [
                "t4-templating",
                "csharp"
            ],
            "alias": "t4",
            "owner": "RunDevelopment"
        },
        "t4-vb": {
            "title": "T4 Text Templates (VB)",
            "require": [
                "t4-templating",
                "vbnet"
            ],
            "owner": "RunDevelopment"
        },
        "tap": {
            "title": "TAP",
            "owner": "isaacs",
            "require": "yaml"
        },
        "tcl": {
            "title": "Tcl",
            "owner": "PeterChaplin"
        },
        "tt2": {
            "title": "Template Toolkit 2",
            "require": [
                "clike",
                "markup-templating"
            ],
            "owner": "gflohr"
        },
        "textile": {
            "title": "Textile",
            "require": "markup",
            "optional": "css",
            "owner": "Golmote"
        },
        "toml": {
            "title": "TOML",
            "owner": "RunDevelopment"
        },
        "tremor": {
            "title": "Tremor",
            "alias": [
                "trickle",
                "troy"
            ],
            "owner": "darach",
            "aliasTitles": {
                "trickle": "trickle",
                "troy": "troy"
            }
        },
        "turtle": {
            "title": "Turtle",
            "alias": "trig",
            "aliasTitles": {
                "trig": "TriG"
            },
            "owner": "jakubklimek"
        },
        "twig": {
            "title": "Twig",
            "require": "markup-templating",
            "owner": "brandonkelly"
        },
        "typescript": {
            "title": "TypeScript",
            "require": "javascript",
            "optional": "js-templates",
            "alias": "ts",
            "owner": "vkbansal"
        },
        "typoscript": {
            "title": "TypoScript",
            "alias": "tsconfig",
            "aliasTitles": {
                "tsconfig": "TSConfig"
            },
            "owner": "dkern"
        },
        "unrealscript": {
            "title": "UnrealScript",
            "alias": [
                "uscript",
                "uc"
            ],
            "owner": "RunDevelopment"
        },
        "uorazor": {
            "title": "UO Razor Script",
            "owner": "jaseowns"
        },
        "uri": {
            "title": "URI",
            "alias": "url",
            "aliasTitles": {
                "url": "URL"
            },
            "owner": "RunDevelopment"
        },
        "v": {
            "title": "V",
            "require": "clike",
            "owner": "taggon"
        },
        "vala": {
            "title": "Vala",
            "require": "clike",
            "optional": "regex",
            "owner": "TemplarVolk"
        },
        "vbnet": {
            "title": "VB.Net",
            "require": "basic",
            "owner": "Bigsby"
        },
        "velocity": {
            "title": "Velocity",
            "require": "markup",
            "owner": "Golmote"
        },
        "verilog": {
            "title": "Verilog",
            "owner": "a-rey"
        },
        "vhdl": {
            "title": "VHDL",
            "owner": "a-rey"
        },
        "vim": {
            "title": "vim",
            "owner": "westonganger"
        },
        "visual-basic": {
            "title": "Visual Basic",
            "alias": [
                "vb",
                "vba"
            ],
            "aliasTitles": {
                "vba": "VBA"
            },
            "owner": "Golmote"
        },
        "warpscript": {
            "title": "WarpScript",
            "owner": "RunDevelopment"
        },
        "wasm": {
            "title": "WebAssembly",
            "owner": "Golmote"
        },
        "web-idl": {
            "title": "Web IDL",
            "alias": "webidl",
            "owner": "RunDevelopment"
        },
        "wgsl": {
            "title": "WGSL",
            "owner": "Dr4gonthree"
        },
        "wiki": {
            "title": "Wiki markup",
            "require": "markup",
            "owner": "Golmote"
        },
        "wolfram": {
            "title": "Wolfram language",
            "alias": [
                "mathematica",
                "nb",
                "wl"
            ],
            "aliasTitles": {
                "mathematica": "Mathematica",
                "nb": "Mathematica Notebook"
            },
            "owner": "msollami"
        },
        "wren": {
            "title": "Wren",
            "owner": "clsource"
        },
        "xeora": {
            "title": "Xeora",
            "require": "markup",
            "alias": "xeoracube",
            "aliasTitles": {
                "xeoracube": "XeoraCube"
            },
            "owner": "freakmaxi"
        },
        "xml-doc": {
            "title": "XML doc (.net)",
            "require": "markup",
            "modify": [
                "csharp",
                "fsharp",
                "vbnet"
            ],
            "owner": "RunDevelopment"
        },
        "xojo": {
            "title": "Xojo (REALbasic)",
            "owner": "Golmote"
        },
        "xquery": {
            "title": "XQuery",
            "require": "markup",
            "owner": "Golmote"
        },
        "yaml": {
            "title": "YAML",
            "alias": "yml",
            "owner": "hason"
        },
        "yang": {
            "title": "YANG",
            "owner": "RunDevelopment"
        },
        "zig": {
            "title": "Zig",
            "owner": "RunDevelopment"
        }
    },
    "plugins": {
        "meta": {
            "path": "plugins/{id}/prism-{id}",
            "link": "plugins/{id}/"
        },
        "line-highlight": {
            "title": "Line Highlight",
            "description": "Highlights specific lines and/or line ranges."
        },
        "line-numbers": {
            "title": "Line Numbers",
            "description": "Line number at the beginning of code lines.",
            "owner": "kuba-kubula"
        },
        "show-invisibles": {
            "title": "Show Invisibles",
            "description": "Show hidden characters such as tabs and line breaks.",
            "optional": [
                "autolinker",
                "data-uri-highlight"
            ]
        },
        "autolinker": {
            "title": "Autolinker",
            "description": "Converts URLs and emails in code to clickable links. Parses Markdown links in comments."
        },
        "wpd": {
            "title": "WebPlatform Docs",
            "description": 'Makes tokens link to <a href="https://webplatform.github.io/docs/">WebPlatform.org documentation</a>. The links open in a new tab.'
        },
        "custom-class": {
            "title": "Custom Class",
            "description": "This plugin allows you to prefix Prism's default classes (<code>.comment</code> can become <code>.namespace--comment</code>) or replace them with your defined ones (like <code>.editor__comment</code>). You can even add new classes.",
            "owner": "dvkndn",
            "noCSS": true
        },
        "file-highlight": {
            "title": "File Highlight",
            "description": "Fetch external files and highlight them with Prism. Used on the Prism website itself.",
            "noCSS": true
        },
        "show-language": {
            "title": "Show Language",
            "description": "Display the highlighted language in code blocks (inline code does not show the label).",
            "owner": "nauzilus",
            "noCSS": true,
            "require": "toolbar"
        },
        "jsonp-highlight": {
            "title": "JSONP Highlight",
            "description": "Fetch content with JSONP and highlight some interesting content (e.g. GitHub/Gists or Bitbucket API).",
            "noCSS": true,
            "owner": "nauzilus"
        },
        "highlight-keywords": {
            "title": "Highlight Keywords",
            "description": "Adds special CSS classes for each keyword for fine-grained highlighting.",
            "owner": "vkbansal",
            "noCSS": true
        },
        "remove-initial-line-feed": {
            "title": "Remove initial line feed",
            "description": "Removes the initial line feed in code blocks.",
            "owner": "Golmote",
            "noCSS": true
        },
        "inline-color": {
            "title": "Inline color",
            "description": "Adds a small inline preview for colors in style sheets.",
            "require": "css-extras",
            "owner": "RunDevelopment"
        },
        "previewers": {
            "title": "Previewers",
            "description": "Previewers for angles, colors, gradients, easing and time.",
            "require": "css-extras",
            "owner": "Golmote"
        },
        "autoloader": {
            "title": "Autoloader",
            "description": "Automatically loads the needed languages to highlight the code blocks.",
            "owner": "Golmote",
            "noCSS": true
        },
        "keep-markup": {
            "title": "Keep Markup",
            "description": "Prevents custom markup from being dropped out during highlighting.",
            "owner": "Golmote",
            "optional": "normalize-whitespace",
            "noCSS": true
        },
        "command-line": {
            "title": "Command Line",
            "description": "Display a command line with a prompt and, optionally, the output/response from the commands.",
            "owner": "chriswells0"
        },
        "unescaped-markup": {
            "title": "Unescaped Markup",
            "description": "Write markup without having to escape anything."
        },
        "normalize-whitespace": {
            "title": "Normalize Whitespace",
            "description": "Supports multiple operations to normalize whitespace in code blocks.",
            "owner": "zeitgeist87",
            "optional": "unescaped-markup",
            "noCSS": true
        },
        "data-uri-highlight": {
            "title": "Data-URI Highlight",
            "description": "Highlights data-URI contents.",
            "owner": "Golmote",
            "noCSS": true
        },
        "toolbar": {
            "title": "Toolbar",
            "description": "Attach a toolbar for plugins to easily register buttons on the top of a code block.",
            "owner": "mAAdhaTTah"
        },
        "copy-to-clipboard": {
            "title": "Copy to Clipboard Button",
            "description": "Add a button that copies the code block to the clipboard when clicked.",
            "owner": "mAAdhaTTah",
            "require": "toolbar",
            "noCSS": true
        },
        "download-button": {
            "title": "Download Button",
            "description": "A button in the toolbar of a code block adding a convenient way to download a code file.",
            "owner": "Golmote",
            "require": "toolbar",
            "noCSS": true
        },
        "match-braces": {
            "title": "Match braces",
            "description": "Highlights matching braces.",
            "owner": "RunDevelopment"
        },
        "diff-highlight": {
            "title": "Diff Highlight",
            "description": "Highlights the code inside diff blocks.",
            "owner": "RunDevelopment",
            "require": "diff"
        },
        "filter-highlight-all": {
            "title": "Filter highlightAll",
            "description": "Filters the elements the <code>highlightAll</code> and <code>highlightAllUnder</code> methods actually highlight.",
            "owner": "RunDevelopment",
            "noCSS": true
        },
        "treeview": {
            "title": "Treeview",
            "description": "A language with special styles to highlight file system tree structures.",
            "owner": "Golmote"
        }
    }
};
if (0, $f461167874f9fba1$exports) $f461167874f9fba1$exports = $f461167874f9fba1$var$components;


var $5c0b5976214e9708$exports = {};
$5c0b5976214e9708$exports = {
    // Case insensitive
    supportedLangs: [
        "JavaScript",
        "HTML",
        "CSS",
        "SQL",
        "Python",
        "TypeScript",
        "Java",
        "Bash",
        "CSharp",
        "C++",
        "PHP",
        "C",
        "PowerShell",
        "Go",
        "Rust",
        "Kotlin",
        "Dart",
        "Ruby",
        "R",
        "MATLAB",
        "DAX",
        "JSON",
        "YAML",
        "Markdown",
        "Code",
        "Svelte",
        "Shell"
    ].map((r)=>r.toLowerCase())
};


var $995831ea55bf4433$require$supportedLangs = $5c0b5976214e9708$exports.supportedLangs;
/**
 * @returns {Set<string>}
 */ const $995831ea55bf4433$var$getPrismLangs = function() {
    let prismLangs = new Set();
    $995831ea55bf4433$require$supportedLangs.forEach((supportedLanguage)=>{
        prismLangs.add(supportedLanguage);
        if (supportedLanguage in $f461167874f9fba1$exports.languages) {
            const languageComponent = $f461167874f9fba1$exports.languages[supportedLanguage];
            if (languageComponent.alias) {
                if (Array.isArray(languageComponent.alias)) /** @type {string[]} */ languageComponent.alias.forEach((a)=>prismLangs.add(a));
                else prismLangs.add(languageComponent.alias);
            }
        }
    });
    return prismLangs;
};
$995831ea55bf4433$exports = $995831ea55bf4433$var$getPrismLangs;


/**
 *
 * @param {string} code
 * @param {string} lang
 * @param {string} [meta]
 * @returns
 */ function $cd1a4f047825b413$var$highlighter(code, lang, meta) {
    code = code.replace(/'/g, "&apos;");
    code = code.replace(/"/g, "&quot;");
    // Replace curly braces or Svelte will try to evaluate as a JS expression
    code = code.replace(/{/g, "&lbrace;").replace(/}/g, "&rbrace;");
    if (lang?.toLowerCase() === "sql" && meta || !$995831ea55bf4433$exports().has(lang?.toLowerCase() ?? "")) {
        const queryId = lang?.toLowerCase() === "sql" && meta ? meta : lang;
        return `
        {#if ${queryId} }
            <QueryViewer
                queryID = "${queryId ?? "untitled"}"
                queryResult = {${queryId ?? "untitled"}}
            /> 
        {/if}
        `;
    }
    // Ensure that "real" code blocks are rendered not run as queries
    return `<CodeBlock source="${code}" copyToClipboard=true language="${lang}"/>`;
}
$cd1a4f047825b413$exports = {
    highlighter: $cd1a4f047825b413$var$highlighter
};


var $08af48af44cd2179$require$highlighter = $cd1a4f047825b413$exports.highlighter;
var $a6f91e8ed16a5081$exports = {};
/**
 * @type {import("svelte-preprocess/dist/types").PreprocessorGroup}
 */ const $a6f91e8ed16a5081$var$addScriptTags = {
    markup ({ content: content, filename: filename }) {
        if (filename?.endsWith(".md")) {
            if (!content.match(/\<script(.*)\>/)) {
                const result = content + '\n\n<script context="module"> </script>\n\n<script> </script>\n\n';
                return {
                    code: result
                };
            }
            if (!content.match(/\<script(.*)context\=\"module\"(.*)\>/)) {
                const result = content + '\n\n<script context="module"> </script>\n\n';
                return {
                    code: result
                };
            }
            if (!content.match(/\<script\>/)) {
                const result = content + "\n\n<script> </script>\n\n";
                return {
                    code: result
                };
            }
        }
    }
};
$a6f91e8ed16a5081$exports = $a6f91e8ed16a5081$var$addScriptTags;


var $a054465707ed3cfb$exports = {};
var $e009007d2d70b16b$exports = {};

$e009007d2d70b16b$exports = {
    /**
	 * Generates a unique (but consistent) hash for a route
	 * @param {string} filename
	 * @example /src/pages/+page.md /src/pages/my-route/+page.md
	 * @returns string
	 */ getRouteHash: (filename)=>{
        const isIndex = filename.split("/src/pages")[1] === "/+page.md";
        if (isIndex) return $9Mzl4$blueimpmd5("/");
        let route = filename.split("/src/pages")?.[1].replace(".md", "").replace(/\/\+page/g, "");
        if (!route) throw new Error(`Failed to generate route hash for ${filename} (${JSON.stringify({
            isIndex: isIndex
        })})`);
        return $9Mzl4$blueimpmd5(route);
    }
};


var $a054465707ed3cfb$require$getRouteHash = $e009007d2d70b16b$exports.getRouteHash;
var $a2ede75272312e7a$exports = {};






var $EOHnh = parcelRequire("EOHnh");
var $a2ede75272312e7a$require$parseFrontmatter = $EOHnh.parseFrontmatter;

/** @typedef {{ id: string, compileError?: string, compiledQueryString: string, inputQueryString: string, compiled: boolean, inline: boolean }} Query */ /** @type {Record<string, boolean>} */ const $a2ede75272312e7a$var$warnedExternalQueries = {};
/**
 *
 * @param {string} externalQuery
 * @param {string} id
 * @returns {Query | undefined}
 */ const $a2ede75272312e7a$var$readFileToQuery = (externalQuery, id)=>{
    try {
        const content = $9Mzl4$fs.readFileSync(`./queries/${externalQuery}`).toString().trim();
        return {
            id: id.toLowerCase(),
            compiledQueryString: content,
            inputQueryString: content,
            compiled: false,
            inline: false
        };
    } catch  {
        console.warn(`Failed to load sql file ${externalQuery}`);
        return undefined;
    }
};
// Unified parser step to ignore indented code blocks.
// Adapted from the mdsvex source, here: https://github.com/pngwn/MDsveX/blob/master/packages/mdsvex/src/parsers/index.ts
// Discussion & background here:  https://github.com/evidence-dev/evidence/issues/286
/**
 * @this {import('unified').Processor}
 */ const $a2ede75272312e7a$var$ignoreIndentedCode = function() {
    const Parser = this.Parser;
    const block_tokenizers = Parser.prototype.blockTokenizers;
    block_tokenizers.indentedCode = ()=>true;
};
/**
 * @param {string} content File content
 * @param {string} [filename] File name
 * @returns {Query[]}
 */ const $a2ede75272312e7a$var$extractExternalQueries = (content, filename)=>{
    const frontmatter = $a2ede75272312e7a$require$parseFrontmatter(content);
    if (!frontmatter) return [];
    if (!frontmatter.queries) return [];
    if (!Array.isArray(frontmatter.queries)) {
        if (filename) console.warn(`Malformed frontmatter found in ${filename}. Unable to extract external queries.`);
        else console.warn("Malformed frontmatter found. Unable to extract external queries.");
        return [];
    }
    /** @type {unknown[]} */ const queries = frontmatter.queries;
    /**
	 *
	 * @param {string} externalQuery
	 * @returns {boolean}
	 */ const validateExternalQuery = (externalQuery)=>{
        if (!externalQuery.endsWith(".sql")) {
            if (!$a2ede75272312e7a$var$warnedExternalQueries[externalQuery]) {
                $a2ede75272312e7a$var$warnedExternalQueries[externalQuery] = true;
                console.warn($9Mzl4$chalk.bold.red(`! ${externalQuery}`) + $9Mzl4$chalk.gray(" does not appear to be a .sql file, and will not be loaded"));
            }
            return false;
        }
        return true;
    };
    return queries.map((externalQuery)=>{
        if (typeof externalQuery === "string") {
            if (!validateExternalQuery(externalQuery)) return false;
            const id = externalQuery.split(".sql")[0].replace("/", "_").replace("\\", "_");
            return $a2ede75272312e7a$var$readFileToQuery(externalQuery, id);
        } else if (externalQuery && typeof externalQuery === "object") {
            const [usedKey, value] = Object.entries(externalQuery)[0] ?? [
                "",
                undefined
            ];
            // Note; this is to be obseleted, as the import syntax evolves, but for now only one key should be used.
            if (Object.keys(externalQuery).length > 1) console.warn(`ExternalQuery object has more than one key, this may lead to unintended behavior. Only ${usedKey}: ${value} will be imported.`);
            if (!validateExternalQuery(value)) return false;
            return $a2ede75272312e7a$var$readFileToQuery(value, usedKey);
        }
    }).filter((x)=>!!x); // filter out queries that returned false;
};
/**
 * @param {string} content Raw File Content
 * @returns {Query[]}
 */ const $a2ede75272312e7a$var$extractInlineQueries = (content)=>{
    /** @type {Query[]} */ let queries = [];
    let tree = $9Mzl4$unified().use($9Mzl4$remarkparse).use($a2ede75272312e7a$var$ignoreIndentedCode).parse(content);
    const prismLangs = $995831ea55bf4433$exports();
    $9Mzl4$unistutilvisit(tree, "code", function(/** @type {import("mdast").Code} */ node) {
        let id = node.lang ?? "untitled";
        if (id.toLowerCase() === "sql" && node.meta) id = node.meta;
        if (!prismLangs.has(id.toLowerCase()) && id.toLowerCase() !== "plaintext") {
            // Prevent prism code blocks from being interpreted as queries
            let compiledQueryString = node.value.trim(); // refs get compiled and sent to db orchestrator
            let inputQueryString = compiledQueryString; // original, as written
            let compiled = false; // default flag, switched to true if query is compiled
            queries.push({
                id: id,
                compiledQueryString: compiledQueryString,
                inputQueryString: inputQueryString,
                compiled: compiled,
                inline: true
            });
        }
    });
    return queries;
};
const $a2ede75272312e7a$var$strictBuild = process.env.VITE_BUILD_STRICT === "true";
const $a2ede75272312e7a$var$circularRefErrorMsg = "Compiler error: circular reference";
/**
 * @param {string} content
 * @returns {Query[]}
 */ const $a2ede75272312e7a$var$extractQueries = (content)=>{
    /** @type {Query[]} */ const queries = [];
    // todo: second parameter is filename but we don't have that here?
    queries.push(...$a2ede75272312e7a$var$extractExternalQueries(content));
    queries.push(...$a2ede75272312e7a$var$extractInlineQueries(content));
    // Handle query chaining:
    const maxIterations = 15;
    const queryIds = new Set(queries.map((d)=>d.id));
    const interpolated_variables = new Set();
    for(let i = 0; i <= maxIterations; i++)queries.forEach((query)=>{
        const startTemplateInterpolation = /[^\\](\$\{)/g;
        const validTemplateInterpolation = /[^\\]\$\{((?:.|\s)+?)\}/g;
        /*
				This is a somewhat naive way of looking for invalid template strings
				It currently tests for ${} and ${ cases, but is unable to detect } cases
			*/ const hasTemplates = startTemplateInterpolation.exec(query.inputQueryString);
        const hasValidTemplates = validTemplateInterpolation.exec(query.inputQueryString);
        if (hasTemplates?.length !== hasValidTemplates?.length) {
            if (query.inputQueryString.includes("${}")) query.compileError = "Query contains an empty template literal (${})";
            else query.compileError = "Query contains invalid template literal (unmatched ${ and }";
            return;
        }
        const references = query.compiledQueryString.match(/\${.*?\}/gi);
        if (references && references.some((d)=>!interpolated_variables.has(d))) references.forEach((reference)=>{
            try {
                const referencedQueryID = reference.replace("${", "").replace("}", "").trim();
                if (!queryIds.has(referencedQueryID)) interpolated_variables.add(reference);
                else if (i >= maxIterations) throw new Error($a2ede75272312e7a$var$circularRefErrorMsg);
                else {
                    const referencedQuery = queries.find((d)=>d.id === referencedQueryID);
                    if (!referencedQuery) // should be unreachable
                    throw new Error(`Referenced query not found. (Referenced ${referencedQueryID})`);
                    if (!query.inline && referencedQuery.inline) throw new Error(`Cannot reference inline query from SQL File. (Referenced ${referencedQueryID})`);
                    const queryString = `(${referencedQuery.compiledQueryString})`;
                    query.compiledQueryString = query.compiledQueryString.replace(reference, // this actually replaces each $ with $$
                    // this is to avoid [this behaviour](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace#specifying_a_string_as_the_replacement)
                    queryString.replaceAll("$", "$$$$"));
                    query.compiled = true;
                }
            } catch (/** @type {any} */ _e) {
                // if error is unknown use default circular ref. error
                const e = _e.message === undefined || _e.message === null ? Error($a2ede75272312e7a$var$circularRefErrorMsg) : _e;
                query.compileError = e.message;
                query.compiledQueryString = e.message;
                // if build is strict and we detect an error, force a failure
                if ($a2ede75272312e7a$var$strictBuild) throw new Error(e.message);
            }
        });
    });
    return queries;
};
/**
 *
 * @param {string} content File Content
 *
 * @param {string} content File Content
 * @returns {string[]}
 */ const $a2ede75272312e7a$var$getQueryIds = (content)=>{
    return $a2ede75272312e7a$var$extractQueries(content).map((q)=>q.id);
};
$a2ede75272312e7a$exports = {
    extractQueries: $a2ede75272312e7a$var$extractQueries,
    getQueryIds: $a2ede75272312e7a$var$getQueryIds
};


var $a054465707ed3cfb$require$extractQueries = $a2ede75272312e7a$exports.extractQueries;

var $a054465707ed3cfb$require$highlighter = $cd1a4f047825b413$exports.highlighter;

var $i0Jqb = parcelRequire("i0Jqb");
var $a054465707ed3cfb$require$containsFrontmatter = $i0Jqb.containsFrontmatter;
/**
 * If you need an @evidence-dev import in the template strings below, it must be added here to prevent a poor user experience when running a template
 * @type {{ import: string; from: `@evidence-dev/${string}` }[]}
 */ const $a054465707ed3cfb$var$injectedEvidenceImports = [
    {
        import: "{ pageHasQueries, routeHash, toasts }",
        from: "@evidence-dev/component-utilities/stores"
    },
    {
        import: "{ fmt }",
        from: "@evidence-dev/component-utilities/formatting"
    },
    {
        import: "{ CUSTOM_FORMATTING_SETTINGS_CONTEXT_KEY }",
        from: "@evidence-dev/component-utilities/globalContexts"
    },
    {
        import: "{ ensureInputContext }",
        from: "@evidence-dev/sdk/utils/svelte"
    },
    {
        import: "{ profile }",
        from: "@evidence-dev/component-utilities/profile"
    },
    {
        import: "{ Query, hasUnsetValues }",
        from: "@evidence-dev/sdk/usql"
    },
    {
        import: "{ setQueryFunction }",
        from: "@evidence-dev/component-utilities/buildQuery"
    }
];
/**
 *
 * @param {string} filename
 * @param {boolean} componentDevelopmentMode
 * @param {Record<string, import('./extract-queries/extract-queries.cjs').Query>} duckdbQueries
 * @returns
 */ const $a054465707ed3cfb$var$createDefaultProps = function(filename, componentDevelopmentMode, duckdbQueries = {}) {
    const routeH = $a054465707ed3cfb$require$getRouteHash(filename);
    let queryDeclarations = "";
    const IS_VALID_QUERY = /^([a-zA-Z_$][a-zA-Z0-9d_$]*)$/;
    const validIds = Object.keys(duckdbQueries).filter((query)=>IS_VALID_QUERY.test(query) && !duckdbQueries[query].compileError);
    if (validIds.length > 0) {
        // prerendered queries: stuff without ${}
        // reactive queries: stuff with ${}
        const IS_REACTIVE_QUERY = /\${.*?}/s;
        const reactiveIds = validIds.filter((id)=>IS_REACTIVE_QUERY.test(duckdbQueries[id].compiledQueryString));
        // input queries: reactive with ${inputs...} in it
        const IS_INPUT_QUERY = /\${\s*inputs\s*\..*?}/s;
        const input_ids = reactiveIds.filter((id)=>IS_INPUT_QUERY.test(duckdbQueries[id].compiledQueryString));
        const errQueries = Object.values(duckdbQueries).filter((q)=>q.compileError).map((q)=>`const ${q.id} = Query.create(\`${q.compiledQueryString.replaceAll("$", "\\$")}\`, undefined, { id: "${q.id}", initialError: new Error(\`${q.compileError.replaceAll("$", "\\$")}\`)})`);
        const queryStoreDeclarations = validIds.map((id)=>{
            return `
                // Update external queries
                if (import.meta?.hot) {
                    import.meta.hot.on("evidence:queryChange", ({queryId, content}) => {
                        let errors = []
                        if (!queryId) errors.push("Malformed event: Missing queryId")
                        if (!content) errors.push("Malformed event: Missing content")
                        if (errors.length) {
                            console.warn("Failed to update query on serverside change!", errors.join("\\n"))
                            return
                        }

                        if (queryId === "${id}") {
                            __${id}Text = content
                        }
                        
                    })
                }

                let ${id}InitialStates = { initialData: undefined, initialError: undefined }
                
                // Give initial states for these variables
                /** @type {boolean} */
                let __${id}HasUnresolved = hasUnsetValues\`${duckdbQueries[id].compiledQueryString.replaceAll("`", "\\`")}\`;
                /** @type {string} */
                let __${id}Text = \`${duckdbQueries[id].compiledQueryString.replaceAll("`", "\\`")}\`


                if (browser) {
                    // Data came from SSR
                    if (data.${id}_data) {
                        // vvv is this still used/possible?
                        if (data.${id}_data instanceof Error) {
                            ${id}InitialStates.initialError = data.${id}_data
                        } else {
                            ${id}InitialStates.initialData = data.${id}_data
                        }
                        if (data.${id}_columns) {
                            ${id}InitialStates.knownColumns = data.${id}_columns
                        }
                    }
                }

                /** @type {import("@evidence-dev/sdk/usql").QueryValue} */
                let ${id};

                $: __${id}HasUnresolved = hasUnsetValues\`${duckdbQueries[id].compiledQueryString.replaceAll("`", "\\`")}\`;
                $: __${id}Text = \`${duckdbQueries[id].compiledQueryString.replaceAll("`", "\\`")}\`

                // keep initial state around until after the query has resolved once
                let __${id}InitialFactory = false;
                $: if (__${id}HasUnresolved || !__${id}InitialFactory) {    
                    if (!__${id}HasUnresolved) {
                        __${id}Factory(__${id}Text, { noResolve: __${id}HasUnresolved, ...${id}InitialStates });
                        __${id}InitialFactory = true;
                    }
                } else {
                    __${id}Factory(__${id}Text, { noResolve: __${id}HasUnresolved });
                }

                const __${id}Factory = Query.createReactive(
                    { callback: v => {
                        ${id} = v
                    }, execFn: queryFunc },
                    { id: '${id}', ...${id}InitialStates }
                )

                // Assign a value for the initial run-through
                // This is split because chicken / egg
                __${id}Factory(__${id}Text, { noResolve: __${id}HasUnresolved, ...${id}InitialStates })

                // Add queries to global scope inside symbols to ease debugging
                globalThis[Symbol.for("${id}")] = { get value() { return ${id} } }
                
                
            `;
        });
        /* 
			reactivity doesn't happen on the server, so we need to manually subscribe to the inputs store
			and update the queries when the inputs change
		*/ const input_query_stores = `
		if (!browser) {
			onDestroy(inputs_store.subscribe((inputs) => {
				${input_ids.map((id)=>`
						__${id}HasUnresolved = hasUnsetValues\`${duckdbQueries[id].compiledQueryString.replaceAll("`", "\\`")}\`;
						__${id}Text = \`${duckdbQueries[id].compiledQueryString.replaceAll("`", "\\`")}\`;
						__${id}Factory(__${id}Text, { noResolve: __${id}HasUnresolved });
				`).join("\n")}
			}));
		}
		`;
        queryDeclarations += `
		${errQueries.join("\n")}
		${queryStoreDeclarations.join("\n")}
		${input_query_stores}
		
		`;
    }
    let defaultProps = `
        import { page } from '$app/stores';
        import { setContext, getContext, beforeUpdate, onDestroy, onMount } from 'svelte';
		import { writable, get } from 'svelte/store';
        
        // Functions

        
        let props;
        export { props as data }; // little hack to make the data name not overlap
        let { data = {}, customFormattingSettings, __db, inputs } = props;
        $: ({ data = {}, customFormattingSettings, __db } = props);

        $routeHash = '${routeH}';

		${/* 
			do not switch to $: inputs = $inputs_store
			reactive statements do not rerun during SSR 
			*/ ""}
		let inputs_store = ensureInputContext(writable(inputs));
		onDestroy(inputs_store.subscribe((value) => inputs = value));

        $: pageHasQueries.set(Object.keys(data).length > 0);

        setContext(CUSTOM_FORMATTING_SETTINGS_CONTEXT_KEY, {
            getCustomFormats: () => {
                return customFormattingSettings.customFormats || [];
            }
        });

		import { browser, dev } from "$app/environment";

		if (!browser) {
			onDestroy(() => Query.emptyCache());
		}

		const queryFunc = (query, query_name) => profile(__db.query, query, { query_name });
		setQueryFunction(queryFunc);

		const scoreNotifier = !dev? () => {} : (info) => {
			toasts.add({
				id: Math.random(),
				title: info.id,
				message: \`Results estimated to use \${
					Intl.NumberFormat().format(info.score / (1024 * 1024))
				}mb of memory, performance may be impacted\`,
				status: 'warning'
			}, 5000);
		};

		if (import.meta?.hot) {
            if (typeof import.meta.hot.data.hmrHasRun === 'undefined') import.meta.hot.data.hmrHasRun = false

			import.meta.hot.on("evidence:reset-queries", async (payload) => {
				await $page.data.__db.updateParquetURLs(JSON.stringify(payload.latestManifest), true);
				Query.emptyCache()
				${validIds.map((id)=>`__${id}Factory(__${id}Text, { noResolve: __${id}HasUnresolved });`).join("\n")}
			})
	    }
		
		let params = $page.params;
		$: params = $page.params;
		
		let _mounted = false;
		onMount(() => (_mounted = true));

        ${queryDeclarations}
    `;
    return `
		${$a054465707ed3cfb$var$injectedEvidenceImports.map((i)=>`import ${i.import} from '${i.from}';`).join("\n")}
		${defaultProps}
	`;
};
/**
 * @type {(componentDevelopmentMode: boolean) => import("svelte-preprocess/dist/types").PreprocessorGroup}
 */ const $a054465707ed3cfb$var$processQueries = (componentDevelopmentMode)=>{
    /**
	 * @type {Record<string, Record<string, import("./extract-queries/extract-queries.cjs").Query>>}
	 */ const dynamicQueries = {};
    return {
        markup ({ content: content, filename: filename }) {
            if (filename?.endsWith(".md")) {
                let fileQueries = $a054465707ed3cfb$require$extractQueries(content);
                dynamicQueries[$a054465707ed3cfb$require$getRouteHash(filename)] = fileQueries.reduce((acc, q)=>{
                    acc[q.id] = q;
                    return acc;
                }, /** @type {typeof dynamicQueries[string]} */ {});
                const externalQueryViews = "\n\n\n" + fileQueries.filter((q)=>!q.inline).map((q)=>{
                    return $a054465707ed3cfb$require$highlighter(q.compiledQueryString, q.id.toLowerCase());
                }).join("\n");
                // Page contains frontmatter
                const frontmatter = $a054465707ed3cfb$require$containsFrontmatter(content);
                if (frontmatter) {
                    const contentWithoutFrontmatter = content.substring(frontmatter.length + 6);
                    const output = `---\n${frontmatter}\n---` + externalQueryViews + contentWithoutFrontmatter;
                    return {
                        code: output
                    };
                }
                return {
                    code: externalQueryViews + content
                };
            }
        },
        script ({ content: content, filename: filename, attributes: attributes }) {
            if (filename?.endsWith(".md")) {
                if (attributes.context !== "module") {
                    const duckdbQueries = dynamicQueries[$a054465707ed3cfb$require$getRouteHash(filename)];
                    return {
                        code: $a054465707ed3cfb$var$createDefaultProps(filename, componentDevelopmentMode, duckdbQueries) + content
                    };
                }
            }
        }
    };
};
$a054465707ed3cfb$exports = {
    processQueries: $a054465707ed3cfb$var$processQueries,
    injectedEvidenceImports: $a054465707ed3cfb$var$injectedEvidenceImports
};


var $7148c3cbe2274da3$exports = {};

const { selectAll: $7148c3cbe2274da3$var$selectAll } = $9Mzl4$hastutilselect;
/**
 * @param {Record<string, string>} additions
 * @returns {(node: import("hast").Element) => void}
 */ $7148c3cbe2274da3$exports = (additions)=>{
    const adders = Object.entries(additions).map($7148c3cbe2274da3$var$adder);
    return (node)=>adders.forEach((a)=>a(node));
};
/**
 * @param {[string, string]} entry
 * @returns {(node: import("hast").Element) => void}
 */ const $7148c3cbe2274da3$var$adder = ([selector, className])=>{
    const writer = $7148c3cbe2274da3$var$write(className);
    return (node)=>$7148c3cbe2274da3$var$selectAll(selector, node).forEach(writer);
};
/**
 * @param {string} className
 * @returns {(node: import("hast").Element) => void}
 */ const $7148c3cbe2274da3$var$write = (className)=>{
    return ({ properties: properties })=>{
        if (!properties) return;
        if (!properties.className) properties.className = className;
        else properties.className += ` ${className}`;
    };
};


var $7131b922fc79ab11$exports = {};
/**
 * @type {(componentDevelopmentMode: boolean) => import("svelte-preprocess/dist/types").PreprocessorGroup}
 */ 
$7131b922fc79ab11$exports = ()=>{
    /**
	 * This ensures that we don't read ./handle-og.svelte more than once
	 * @type {string}
	 */ let handleOgContent;
    return {
        markup: ({ content: content, filename: filename })=>{
            if (typeof filename === "undefined") return;
            if (!filename.endsWith("+page.md")) return;
            if (!handleOgContent) handleOgContent = (parcelRequire("gDT74"));
            return {
                code: handleOgContent + content
            };
        },
        script: ({ content: content, filename: filename, attributes: attributes })=>{
            if (!filename?.endsWith("+page.md")) return;
            if (attributes.context === "module") {
                if (!content.includes("export const metadata =")) // There is no frontmatter, and we want to make sure that it as at least defined.
                // Technically this won't _break_ things, just spam the logs with a vite warning.
                return {
                    code: content + ";const metadata = undefined;"
                };
                else // exporting makes tailwind break HMR
                return {
                    code: content.replace("export const metadata =", "const metadata =")
                };
            } else return {
                code: 'import { addBasePath } from "@evidence-dev/sdk/utils/svelte";' + content
            };
        }
    };
};


var $472a1909771b0305$exports = {};

/**
 * @param {string} originalString
 * @returns {string}
 */ function $472a1909771b0305$var$injectPartials(originalString) {
    const r = /\{@partial\s+"(.*?)"\s*\}/g;
    for (const match of originalString.matchAll(r) ?? []){
        const filename = match[1];
        // There is an error with parcel that prevents the use of the "path" library.
        const content = $9Mzl4$fs.readFileSync(`./partials/${filename}`).toString();
        originalString = originalString.replace(match[0], content);
    }
    return originalString;
}
/** @type {import('svelte/compiler').PreprocessorGroup & { injectPartials: typeof injectPartials }} */ $472a1909771b0305$exports = {
    markup: ({ content: content, filename: filename })=>{
        if (typeof filename === "undefined") return;
        if (!filename.endsWith("+page.md")) return;
        return {
            code: $472a1909771b0305$var$injectPartials(content)
        };
    },
    injectPartials: $472a1909771b0305$var$injectPartials
};




module.exports = function evidencePreprocess(componentDevelopmentMode = false) {
    return [
        $472a1909771b0305$exports,
        $a6f91e8ed16a5081$exports,
        $a054465707ed3cfb$exports.processQueries(componentDevelopmentMode),
        $9Mzl4$mdsvex.mdsvex({
            extensions: [
                ".md"
            ],
            smartypants: {
                quotes: false,
                ellipses: true,
                backticks: true,
                dashes: "oldschool"
            },
            highlight: {
                highlighter: $08af48af44cd2179$require$highlighter
            },
            rehypePlugins: [
                [
                    $7148c3cbe2274da3$exports,
                    {
                        "*": "markdown"
                    }
                ],
                [
                    $9Mzl4$rehypeslug
                ],
                [
                    $9Mzl4$rehypeautolinkheadings,
                    {
                        behavior: "wrap",
                        properties: {}
                    }
                ]
            ]
        }),
        // Add both script tags to all markdown files, if they are missing
        $7131b922fc79ab11$exports()
    ];
};

module.exports.parseFrontmatter = (parcelRequire("EOHnh")).parseFrontmatter;

module.exports.extractQueries = $a2ede75272312e7a$exports.extractQueries;
module.exports.getQueryIds = $a2ede75272312e7a$exports.getQueryIds;
module.exports.injectPartials = $472a1909771b0305$exports.injectPartials;
module.exports.processQueries = $a054465707ed3cfb$exports.processQueries;
module.exports.injectedEvidenceImports = $a054465707ed3cfb$exports.injectedEvidenceImports;


//# sourceMappingURL=index.cjs.map
