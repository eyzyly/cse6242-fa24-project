/// <reference types="svelte" />
export function dropdownOptionStore(opts?: DropdownOptionStoreOpts): {
    addOptions: any;
    /**
     * @param  {...DropdownOption} removeOptions
     */
    removeOptions: any;
    /**
     * @param  {...DropdownOption} toggleOptions
     * @returns {void}
     */
    toggleSelected: any;
    selectAll: () => void;
    deselectAll: () => void;
    options: import("svelte/store").Readable<{
        value: string | number | null;
        label?: string | number | null | undefined;
        idx?: number | undefined;
        selected?: boolean | undefined;
        __auto?: boolean | undefined;
        __removeOnDeselect?: boolean | undefined;
    }[]>;
    selectedOptions: import("svelte/store").Readable<{
        value: string | number | null;
        label?: string | number | null | undefined;
        idx?: number | undefined;
        selected?: boolean | undefined;
        __auto?: boolean | undefined;
        __removeOnDeselect?: boolean | undefined;
    }[]>;
    pauseSorting: () => void;
    resumeSorting: () => void;
    forceSort: () => void;
    destroy: () => boolean;
};
/**
 * <T>
 */
export type Readable<T> = import("svelte/store").Readable<T>;
/**
 * <T>
 */
export type Writable<T> = import("svelte/store").Writable<T>;
export type DropdownOptionBatchUp = ReturnType<typeof batchUp<DropdownOption[] | DropdownOption>>;
export type DropdownOption = z.infer<typeof DropdownOptionSchema>;
export type DropdownOptionStoreOpts = {
    multiselect?: boolean | undefined;
    /**
     * This should be pulled from $inputs[name].rawValues
     */
    initialOptions?: {
        value: string | number | null;
        label?: string | number | null | undefined;
        idx?: number | undefined;
        selected?: boolean | undefined;
        __auto?: boolean | undefined;
        __removeOnDeselect?: boolean | undefined;
    }[] | undefined;
    defaultValues?: (string | number)[] | undefined;
    /**
     * Does not select the first value by default
     */
    noDefault?: boolean | undefined;
    selectAllByDefault?: boolean | undefined;
};
import { z } from 'zod';
/** @template T @typedef {import("svelte/store").Readable<T>} Readable<T> */
/** @template T @typedef {import("svelte/store").Writable<T>} Writable<T> */
/** @typedef {ReturnType<typeof batchUp<DropdownOption[] | DropdownOption>>} DropdownOptionBatchUp */
declare const DropdownOptionSchema: z.ZodObject<{
    label: z.ZodNullable<z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>>;
    value: z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodNull]>;
    idx: z.ZodOptional<z.ZodNumber>;
    selected: z.ZodOptional<z.ZodBoolean>;
    __auto: z.ZodOptional<z.ZodBoolean>;
    __removeOnDeselect: z.ZodOptional<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    value: string | number | null;
    label?: string | number | null | undefined;
    idx?: number | undefined;
    selected?: boolean | undefined;
    __auto?: boolean | undefined;
    __removeOnDeselect?: boolean | undefined;
}, {
    value: string | number | null;
    label?: string | number | null | undefined;
    idx?: number | undefined;
    selected?: boolean | undefined;
    __auto?: boolean | undefined;
    __removeOnDeselect?: boolean | undefined;
}>;
export {};
