/// <reference types="svelte" />
/** @template T @typedef {import('svelte/store').Writable<T>} Writable */
/** @template T @typedef {import('svelte/store').Readable<T>} Readable */
/** @typedef {import('echarts').EChartsOption} EChartsOption */
/** @typedef {NonNullable<import('echarts').MarkPointComponentOption['data']>[number][]} MarkPointData */
/** @typedef {import('echarts').LineSeriesOption} LineSeriesOption */
/** @typedef {import('./types.js').ReferencePointStoreValue} ReferencePointStoreValue */
/** @typedef {import('./types.js').ReferencePointConfig} ReferencePointConfig */
/** @implements {Readable<ReferencePointStoreValue>} */
export class ReferencePointStore implements Readable<ReferencePointStoreValue> {
    /**
     * @param {Readable<any>} propsStore
     * @param {Writable<EChartsOption>} configStore
     */
    constructor(propsStore: Readable<any>, configStore: Writable<EChartsOption>);
    subscribe: (this: void, run: import("svelte/store").Subscriber<import("./types.js").ReferencePointStoreValue>, invalidate?: import("svelte/store").Invalidator<import("./types.js").ReferencePointStoreValue> | undefined) => import("svelte/store").Unsubscriber;
    /** @param {string | undefined} error */
    setError: (error: string | undefined) => void;
    clearError: () => void;
    /** @param {ReferencePointConfig} config */
    setConfig: (config: ReferencePointConfig) => Promise<void>;
    #private;
}
export type Writable<T> = import('svelte/store').Writable<T>;
export type Readable<T> = import('svelte/store').Readable<T>;
export type EChartsOption = import('echarts').EChartsOption;
export type MarkPointData = NonNullable<import('echarts').MarkPointComponentOption['data']>[number][];
export type LineSeriesOption = import('echarts').LineSeriesOption;
export type ReferencePointStoreValue = import('./types.js').ReferencePointStoreValue;
export type ReferencePointConfig = import('./types.js').ReferencePointConfig;
