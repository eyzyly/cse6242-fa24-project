/// <reference types="svelte" />
/** @template T @typedef {import('svelte/store').Writable<T>} Writable */
/** @template T @typedef {import('svelte/store').Readable<T>} Readable */
/** @typedef {import('echarts').EChartsOption} EChartsOption */
/** @typedef {NonNullable<import('echarts').MarkAreaComponentOption['data']>[number][]} MarkAreaData */
/** @typedef {import('echarts').SeriesOption} SeriesOption */
/** @typedef {import('echarts').BarSeriesOption} BarSeriesOption */
/** @typedef {import('echarts').LineSeriesOption} LineSeriesOption */
/** @typedef {import('./types.js').ReferenceAreaStoreValue} ReferenceAreaStoreValue */
/** @typedef {import('./types.js').ReferenceAreaConfig} ReferenceAreaConfig */
/** @implements {Readable<ReferenceAreaStoreValue>} */
export class ReferenceAreaStore implements Readable<ReferenceAreaStoreValue> {
    /**
     * @param {Readable<any>} propsStore
     * @param {Writable<EChartsOption>} configStore
     */
    constructor(propsStore: Readable<any>, configStore: Writable<EChartsOption>);
    subscribe: (this: void, run: import("svelte/store").Subscriber<import("./types.js").ReferenceAreaStoreValue>, invalidate?: import("svelte/store").Invalidator<import("./types.js").ReferenceAreaStoreValue> | undefined) => import("svelte/store").Unsubscriber;
    /** @param {string | undefined} error */
    setError: (error: string | undefined) => void;
    clearError: () => void;
    /** @param {ReferenceAreaConfig} config */
    setConfig: (config: ReferenceAreaConfig) => Promise<void>;
    #private;
}
export namespace LABEL_POSITIONS {
    let topLeft: "insideTopLeft";
    let top: "insideTop";
    let topRight: "insideTopRight";
    let bottomLeft: "insideBottomLeft";
    let bottom: "insideBottom";
    let bottomRight: "insideBottomRight";
    let left: "insideLeft";
    let center: "inside";
    let centre: "inside";
    let right: "insideRight";
}
export type Writable<T> = import('svelte/store').Writable<T>;
export type Readable<T> = import('svelte/store').Readable<T>;
export type EChartsOption = import('echarts').EChartsOption;
export type MarkAreaData = NonNullable<import('echarts').MarkAreaComponentOption['data']>[number][];
export type SeriesOption = import('echarts').SeriesOption;
export type BarSeriesOption = import('echarts').BarSeriesOption;
export type LineSeriesOption = import('echarts').LineSeriesOption;
export type ReferenceAreaStoreValue = import('./types.js').ReferenceAreaStoreValue;
export type ReferenceAreaConfig = import('./types.js').ReferenceAreaConfig;
